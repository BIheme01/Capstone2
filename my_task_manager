# Notes: 
# 1. Use the following username and password to access the admin rights 
# username: admin
# password: password
# 2. Ensure you open the whole folder for this task in VS Code otherwise the 
# program will look in your root directory for the text files.

#===========================IMPORTING LIBRARIES=================================
import os
from datetime import datetime, date

DATETIME_STRING_FORMAT = "%Y-%m-%d"

#=============================FUNCTIONS SECTION=================================

# FUNCTION 1 - REGISTER USER
def reg_user(username_password):
    '''Add a new user to the user.txt file'''
    # Read in user_data
    with open("capstone_two/user.txt", 'r') as user_file:
        user_data = user_file.read().split("\n")

        # Convert to a dictionary
        username_password = {}
        for user in user_data:
            username, password = user.split(';')
            username_password[username] = password

        while True: 
            new_username = input("New Username: ")
            # Check if new_username is in text file, if so, ask for another username
            with open ('capstone_two/user.txt', 'r+') as file:
                lines = file.readlines()
                if new_username in username_password.keys():
                    print ("Username already exists, please choose another username")
                    continue
                else:
                    # - Request input of a new password
                    new_password = input("New Password: ")

                    # - Request input of password confirmation.
                    confirm_password = input("Confirm Password: ")

                    # - Check if the new password and confirmed password are the same.
                    if new_password == confirm_password:
                        # - If they are the same, add them to the user.txt file,
                        print("New user added")
                        username_password[new_username] = new_password
                        
                        with open("capstone_two/user.txt", "w") as out_file:
                            user_data = []
                            for k in username_password:
                                user_data.append(f"{k};{username_password[k]}")
                            out_file.write("\n".join(user_data))
                            break

                    # - Otherwise you present a relevant message.
                    else:
                            print("Passwords do no match")


# FUNCTION 2 - TASK NUMBER 
def task_num():
    '''Work out new task number by counting number of tasks and adding 1'''
    with open("capstone_two/tasks.txt","r") as file:
        task_num = (len(file.readlines())+1)
        return task_num
    
# FUNCTION 3 - CREATE INITIAL TASK LIST
def open_tasklist():
    # Open current task list     
    with open("capstone_two/tasks.txt", 'r+') as task_file:
        task_data = task_file.read().split("\n")
        task_data = [t for t in task_data if t != ""]

    task_list = []
    for t_str in task_data:
        curr_t = {}

        # Split by semicolon and manually add each component
        task_components = t_str.split(";")
        curr_t['task_number'] = task_components[0]
        curr_t['title'] = task_components[1]        
        curr_t['username'] = task_components[2]
        curr_t['assigned_date'] = task_components[3]
        curr_t['due_date'] = task_components[4]
        curr_t['completed'] = True if task_components[5] == "Yes" else "No"
        curr_t['description'] = task_components[6]

        task_list.append(curr_t)
        table = []
    return task_list  

# FUNCTION 3 - ADD TASK
def add_task():
    '''Allow a user to add a new task to task.txt file
                Prompt a user for the following: 
                - A username of the person whom the task is assigned to,
                - A title of a task,
                - A description of the task and 
                - the due date of the task.'''
    # Code for adding task
    task_list = open_tasklist()
    task_file_path = "capstone_two/tasks.txt"
    user_file_path = "capstone_two/user.txt"
    # Read user_data
    with open(user_file_path, 'r+') as user_file:
        user_data = user_file.read().split("\n")

    # Convert user_data into a dictionary
        username_password = {}
        for user in user_data:
            username, password = user.split(';')
            username_password[username] = password

        while True:
            add_or_exit_task = input("Please confirm that you would like to add a new task (y/n)? ").lower()
            if add_or_exit_task == 'n':
                break
            elif add_or_exit_task == 'y':
                while True:
                    task_username = input("\nName of person assigned to task: \n")
                    if task_username not in username_password.keys():
                        print("User does not exist. Please enter a valid username\n")
                        continue
                    else:
                        task_number = str(task_num())
                        task_title = input("Title of Task: ")
                        task_description = input("Description of Task: ")
                        while True:
                            try:
                                task_due_date = input("Due date of task (YYYY-MM-DD): ")
                                # Convert task due date into date object
                                due_date_time = datetime.strptime(task_due_date, DATETIME_STRING_FORMAT)
                                break

                            except ValueError:
                                print("Invalid datetime format. Please use the format specified")


                        # Then get the current date.
                        curr_date = date.today()
                        ''' Add the data to the file task.txt and
                            Include 'No' to indicate if the task is complete.'''
                        new_task = {
                            "task_number": task_number,
                            "title": task_title,
                            "username": task_username,
                            "assigned_date": curr_date,
                            "due_date": due_date_time,
                            "completed": "No",
                            "description": task_description
                        }
                        task_list.append(new_task)
                        with open(task_file_path, "w") as task_file:
                            task_list_to_write = []
                            for t in task_list:
                                str_attrs = [
                                    t['task_number'],
                                    t['title'],
                                    t['username'],
                                    str(t['assigned_date']),
                                    str(t['due_date']),
                                    "Yes" if t['completed'] else "No",
                                    t['description']
                                ]
                                task_list_to_write.append(";".join(str_attrs))
                            task_file.write("\n".join(task_list_to_write))
                                
                        print("Task successfully added.")
                        break
            else:
                print("Error. Please select y/n: ")
                continue

# FUNCTION 4 - VIEW ALL 
def view_all(task_list):
    '''Reads the task from task.txt file and prints to the console in the 
        format of Output 2 presented in the task pdf (i.e. includes spacing
        and labelling) 
    '''
    # Code for viewing task list
    print("\nHere is the entire task list:\n")
    # with open("tasks.txt", 'r') as task_file:
    #     task_list = task_file.read().split("\n")
    #     task_list = [t for t in task_list if t != ""]

    for t in task_list:
        disp_str = f"Task Number:\t\t {t['task_number']}\n"
        disp_str += f"Task: \t\t\t {t['title']}\n"
        disp_str += f"Assigned to:\t\t {t['username']}\n"
        disp_str += f"Date Assigned: \t\t {t['assigned_date']}\n"
        disp_str += f"Due Date: \t\t {t['due_date']}\n"
        disp_str += f"Task Completed? \t {t['completed']}\n"
        disp_str += f"Task Description: \n {t['description']}\n"
        print(disp_str)
        
# FUNCTION 5 - CHANGE CURRENT LIST TO DISPLAY FORMAT
def display_task_list(task_list):
    '''Changes current list format to more presentable format'''
    for t in task_list:
        disp_str = disp_str.split(";")
        disp_str = f"Task Number:\t\t {t[disp_str[0]]}\n"
        disp_str += f"Task: \t\t\t {t[disp_str[1]]}\n"
        disp_str += f"Assigned to:\t\t {t[disp_str[2]]}\n"
        disp_str += f"Date Assigned: \t\t {t[disp_str[3]]}\n"
        disp_str += f"Due Date: \t\t {t[disp_str[4]]}\n"
        disp_str += f"Task Completed? \t {t[disp_str[5]]}\n"
        disp_str += f"Task Description: \n {t[disp_str[6]]}\n"
        print(disp_str)
              
              
# FUNCTION 6 - READ TASKS FROM TEXT FILE   
def read_tasks_from_file(filepath):
    '''Read tasks from filepath (tasks.txt file) into a list of dictionaries'''
    with open("capstone_two/tasks.txt", 'r') as task_file:
        task_data = task_file.read().split("\n")
        task_data = [t for t in task_data if t != ""]


    task_list = []
    for t_str in task_data:
        curr_t = {}

        # Split by semicolon and manually add each component
        task_components = t_str.split(";")
        curr_t['username'] = task_components[0]
        curr_t['task_number'] = task_components[1]
        curr_t['title'] = task_components[2]
        curr_t['description'] = task_components[3]
        curr_t['due_date'] = datetime.strptime(task_components[4], DATETIME_STRING_FORMAT)
        curr_t['assigned_date'] = datetime.strptime(task_components[5], DATETIME_STRING_FORMAT)
        curr_t['completed'] = True if task_components[6] == "Yes" else "No"

        task_list.append(curr_t)
        table = []
    return task_list

# FUNCTION 7 - DISPLAY CURRENT USER'S TASKLIST
def user_tasklist(curr_user):
    '''Display current user task list'''
    #Code for task list
    task_list = open_tasklist()
    print("\nThis is your current task list\n")
    # Display current user's task list in a presentable format
    for t in task_list:
        if t['username'] == curr_user:
            disp_str = f"Task Number:\t\t {t['task_number']}\n"
            disp_str += f"Task: \t\t\t {t['title']}\n"
            disp_str += f"Assigned to:\t\t {t['username']}\n"
            disp_str += f"Date Assigned: \t\t {t['assigned_date'].strftime(DATETIME_STRING_FORMAT)}\n"
            disp_str += f"Due Date: \t\t {t['due_date'].strftime(DATETIME_STRING_FORMAT)}\n"
            disp_str += f"Task Completed? \t {t['completed']}\n"
            disp_str += f"Task Description: \n {t['description']}\n"
            print(disp_str)
            print("*"*80)

# FUNCTION 8 - VIEW MINE
def view_mine(task_list, curr_user):
    '''Reads the task from task.txt file and prints to the console in the 
           format of Output 2 presented in the task pdf (i.e. includes spacing
           and labelling)
        '''
    # Display the current user's tasklist 
    user_tasklist(curr_user=curr_user)

    # Ask user to select specific task (by entering a task number) 
    tasks = read_tasks_from_file('tasks.txt')
    curr_user == curr_user
    while True:
        user_tasklist(curr_user)
        task_selection = input("""\nTo work on a task, please enter the task number
or enter -1 to return to the main menu: """)
        '''if task selection is a number and present in task list,
            user can edit task or mark task as complete'''
        if task_selection.isnumeric() and task_selection != "-1": 
            for task in tasks:
                if task['username'] == curr_user and task['task_number'] == task_selection:
                    print("\nHere is the task selected for editing:\n")
                   
                    # Display the task selected for editing
                    disp_task_selected = f"Task Number:\t\t {task['task_number']}\n"
                    disp_task_selected += f"Task: \t\t\t {task['title']}\n"
                    disp_task_selected += f"Assigned to:\t\t {task['username']}\n"
                    disp_task_selected += f"Date Assigned: \t\t {task['assigned_date'].strftime(DATETIME_STRING_FORMAT)}\n"
                    disp_task_selected += f"Due Date: \t\t {task['due_date'].strftime(DATETIME_STRING_FORMAT)}\n"
                    disp_task_selected += f"Task Completed? \t {task['completed']}\n"
                    disp_task_selected += f"Task Description: \n {task['description']}\n"
                    print(disp_task_selected) 
                    
                    while True:
                        edit_or_signoff = input("""\nWhat would you like to do? Please select from the following option:
        C - to mark task as complete
        E - to edit task
        :""").upper()
                        # Mark task as complete if Option C is selected
                        if edit_or_signoff == "C":
                            file_path = 'capstone_two/tasks.txt'
                            line_number = int(task_selection)
                            replacement_value = 'Yes'

                            # Open the tasks.txt file
                            with open(file_path,"r") as file:
                                lines = file.readlines()
                                # Update task selected, change 'completed' from 'no' to 'yes' 
                                if line_number <= len(lines):
                                    lines[line_number - 1] = lines[line_number - 1].replace('No', replacement_value)
                                    completed_task = lines[line_number - 1]
                                    # Write the updated content back to the file
                                    with open(file_path, 'w') as file:
                                        file.writelines(lines)

                            # Display the completed task 
                            completed_task = completed_task.split(";")
                            new_task_owner = f"Task Number:\t\t {completed_task[0]}\n"
                            new_task_owner+= f"Task: \t\t\t {completed_task[1]}\n"
                            new_task_owner += f"Assigned to:\t\t {completed_task[2]}\n"
                            new_task_owner += f"Date Assigned: \t\t {completed_task[3]}\n"
                            new_task_owner += f"Due Date: \t\t {completed_task[4]}\n"
                            new_task_owner+= f"Task Completed? \t {completed_task[5]}\n"
                            new_task_owner += f"Task Description: \n {completed_task[6]}\n"
                            print("""\nYour task has been marked complete. 
    Please see your changes below:\n""")
                            print(new_task_owner) 
                            break    


                        # Enable user to edit task if Option E is selected   
                        elif edit_or_signoff == "E": 
                            # Task cannot be changed if marked complete
                            if task['completed'] == "Yes" or task['completed'] == True: 
                                print("Sorry, this task is complete and cannot be edited")
                                print("*"*80)
                                break
                            else:
                                task['completed'] == "No"
                                # User can change name of task owner or task due date
                                change_required = input("""
        What change would you like to make? Please select from the following option:
        U - change owner of assigned task
        D - change due date 
        : """).upper()
                                # If user choose to change the task owner
                                if change_required == "U":
                                    new_user = input("Please enter the name of the new task owner: ")
                                    task['username'] == new_user
                                    file_path = 'capstone_two/tasks.txt'
                                    line_number = int(task_selection)
                                    update_value = new_user


                                    # Open the tasks.txt file, change result from no to yes
                                    with open(file_path,"r") as file:
                                        lines = file.readlines()
                                    # Change assigned taskowner
                                    if line_number <= len(lines):
                                        current_line = lines[line_number - 1]
                                        updated_line = current_line.replace('admin', update_value)
                                        lines[line_number - 1] = updated_line
                                    # Write the updated content back to the file
                                    with open(file_path, 'w') as file:
                                        file.writelines(lines)

                                    # Display task with new assigned owner
                                    print("""\nSuccess. The assigned task owner has been updated. 
Please see your changes below\n""")
                                    print("*"*80)
                                    updated_line = updated_line.split(";")
                                    new_task_owner = f"Task Number:\t\t {updated_line[0]}\n"
                                    new_task_owner += f"Task: \t\t\t {updated_line[1]}\n"
                                    new_task_owner += f"Assigned to:\t\t {updated_line[2]}\n"
                                    new_task_owner += f"Date Assigned: \t\t {updated_line[3]}\n"
                                    new_task_owner += f"Due Date: \t\t {updated_line[4]}\n"
                                    new_task_owner += f"Task Completed? \t {updated_line[5]}\n"
                                    new_task_owner += f"Task Description: \n {updated_line[6]}\n"                                  
                                    print(new_task_owner) 
                                    print("*"*80)
                                    break
                                else:
                                    # When user asks to change the task's due date
                                    change_required == "D"
                                    new_due_date = input("Please enter the new due date (YYYY-MM-DD): ").strftime(DATETIME_STRING_FORMAT)         
                                    task['due_date'] == new_due_date 
                                    file_path = 'capstone_two/tasks.txt'
                                    line_number = int(task_selection)

                                    # Read all lines from the file
                                    with open(file_path, 'r') as file:
                                        lines = file.readlines()

                                    # Update task selection (line number) with the new date
                                    if line_number <= len(lines):
                                        current_line = lines[line_number - 1]
                                        line_parts = current_line.split(';')
                                        # Ensure that task has more than 4 components, Due Date is in index position 4
                                        if len(line_parts) > 4: 
                                            # New date to replace the existing date in index position 4 
                                            line_parts[4] = new_due_date  # Update the date at index position 4
                                            updated_line = ';'.join(line_parts)
                                            lines[line_number - 1] = updated_line

                                    # Write the updated content back to the file
                                    with open(file_path, 'w') as file:
                                        file.writelines(lines)
                                
                                    # Display task with new due date
                                    print("""\nSuccess. Your task now has a new due date. 
Please see your changes below\n""")
                                    updated_line = updated_line.split(";")
                                    task_due_date += f"Assigned to:\t\t {updated_line[0]}\n"
                                    task_due_date = f"Task Number:\t\t {updated_line[1]}\n"
                                    task_due_date += f"Task: \t\t\t {updated_line[2]}\n"
                                    task_due_date += f"Task Description: \n {updated_line[3]}\n"
                                    task_due_date += f"Due Date: \t\t {updated_line[4]}\n"
                                    task_due_date += f"Date Assigned: \t\t {updated_line[5]}\n"
                                    task_due_date += f"Task Completed? \t {updated_line[6]}\n"
                                    print(task_due_date) 
                                    print("*"*80)
                                    break           
                        else:
                            print("Error, please enter 'C' or 'E")
                            continue   
                               
        #Return to Main menu if task selection is "-1"
        elif task_selection == "-1":
            break
        else:
            print("""Error, the task number you have selected does not exist
                Please try again""")
            continue


# FUNCTION 9 - DISPLAY STATISTICS OF TASKS AND USERS
def display_stats(curr_user):
    '''If the user is an admin they can display statistics about number of users
            and tasks.'''
    
    if curr_user == "admin":
        with open("capstone_two/user.txt", "r") as file:
            num_users = len(file.readlines())

        with open("capstone_two/tasks.txt", "r") as file:
            num_tasks = len(file.readlines())

        print("-----------------------------------")
        print('\33[1m'f"Welcome {curr_user}, here is your summary: \n"'\33[0m')
        print(f"Number of users: \t\t {num_users}")
        print(f"Number of tasks: \t\t {num_tasks}")
        print("-----------------------------------")    
    else:
        print(f"Sorry. Only admins can view statistics!")

    # Generate the user and task overview reports
    generate_reports()

    # Display the user overview report
    print('\33[1m'f"\nHere is your user overview report: \n"'\33[0m')
    with open ("capstone_two/user_overview.txt", "r+", encoding='utf-8') as uo_file:
        for line in uo_file:
            # Replace tabs in text file with one space
            remove_tab = line.replace("\t","")
            # Remove lines in text file with strip method
            print(remove_tab.strip())
        print("-------------------------------------------")  
            

 # Display the task overview report
    print('\33[1m'"\nHere is your task overview report: \n"'\33[0m')
    with open ("capstone_two/task_overview.txt", "r+", encoding='utf-8') as to_file:
        for line in to_file:
            # Replace tabs in text file with one space
            remove_tab = line.replace("\t","")
            # Remove lines in text file with strip method
            print(remove_tab.strip())
        print("-------------------------------------------")  






# FUNCTION 11 -  GENERATE REPORTS
def generate_reports():
    ''' Generate reports from task_overview.txt and user_overview.txt files'''
    task_list = open_tasklist()
    total_tasks_completed = 0
    total_tasks_uncompleted = 0
    total_tasks_overdue = 0
    today = datetime. now() # Today's date

    # Work out total tasks generated
    with open ("capstone_two/tasks.txt", "r") as file:
        total_tasks_generated = len(file.readlines())
    
    for t in task_list:
        # Work out total tasks completed
        if t['completed'] == 'yes'.lower():
            total_tasks_completed += 1 
        # Work out total tasks completed
        elif t['completed'] == 'no'.lower():
            total_tasks_uncompleted += 1
        # Work out overdue tasks
        else:
            t['due_date']<today
            total_tasks_overdue +=1

    percentage_tasks_incomplete = ((total_tasks_uncompleted/total_tasks_generated)*100)
    percentage_tasks_overdue = ((total_tasks_overdue/total_tasks_generated)*100)

    with open ("capstone_two/task_overview.txt", "w+") as to_file:
        to_file.write(f"The total number of tasks generated:\t\t {total_tasks_generated}\n")
        to_file.write(f"The total number of tasks completed:\t\t {total_tasks_completed}\n")
        to_file.write(f"The total number of incomplete tasks:\t\t {total_tasks_uncompleted}\n")
        to_file.write(f"The total number of tasks overdue:\t\t\t {total_tasks_overdue}\n")
        to_file.write(f"The percentage of incomplete tasks:\t\t\t {percentage_tasks_incomplete}%\n")
        to_file.write(f"The percentage of tasks overdue:\t\t\t {percentage_tasks_overdue}%\n") 
    
    # Calculate total number of users and tasks
    total_users = len(set(task['username'] for task in task_list))
    total_tasks = len(task_list)

    # Prepare data for user overview calculations
    user_overviews = {}
    for task in task_list:
        username = task['username']

        if username not in user_overviews:
            user_overviews[username] = {
                'total_tasks_assigned': 0,
                'completed_tasks': 0,
                'tasks_still_to_complete': 0,
                'overdue_tasks': 0
            }

        user_overviews[username]['total_tasks_assigned'] += 1

        if task['completed'] == 'Yes':
            user_overviews[username]['completed_tasks'] += 1
        else:
            today = datetime. now()
            if task['due_date'] < today:
                user_overviews[username]['overdue_tasks'] += 1
            else:
                user_overviews[username]['tasks_still_to_complete'] += 1

    # Write the user overview data to user_overview.txt
    with open('capstone_two/user_overview.txt', 'w+') as uo_file:
        uo_file.write(f"Total number of users registered:\t\t\t\t {total_users}\n")
        uo_file.write(f"Total number of tasks generated and tracked:\t {total_tasks}\n")
        uo_file.write("\n")
        uo_file.write(f"Here is the breakdown of tasks for each user:\n")
        uo_file.write("\n")

        for username, overview in user_overviews.items():
            total_assigned = overview['total_tasks_assigned']
            completed = overview['completed_tasks']
            to_complete = overview['tasks_still_to_complete']
            overdue = overview['overdue_tasks']

            uo_file.write(f"User:\t\t\t\t\t\t\t\t\t\t\t {username}\n")
            uo_file.write(f"Total tasks assigned:\t\t\t\t\t\t\t {total_assigned}\n")
            uo_file.write(f"Percentage of total tasks assigned:\t\t\t\t {(total_assigned / total_tasks) * 100:.2f}%\n")
            uo_file.write(f"Percentage of completed tasks:\t\t\t\t\t {(completed / total_assigned) * 100:.2f}%\n")
            uo_file.write(f"Percentage of tasks still to complete:\t\t\t {(to_complete / total_assigned) * 100:.2f}%\n")
            uo_file.write(f"Percentage of overdue tasks:\t\t\t\t\t {(overdue / total_assigned) * 100:.2f}%\n\n")

#===================================MAIN PROGRAMME===========================    
def main():
    '''Run main programme'''
    # 1. Welcome user to task manageR
    LINE = "*"*80
    print(LINE)
    welcome_message = "Hello, welcome to your task manager" 
    print(welcome_message.center(100))
    print(LINE)
    print("")

    # 2. ====Login Section====
    '''This code reads usernames and password from the user.txt file to 
        allow a user to login.
    '''
    # Ask user to log in to task manager

    # If no user.txt file, write one with a default account
    if not os.path.exists("user.txt"):
        with open("user.txt", "w") as default_file:
            default_file.write("admin;password")

    # Read in user_data
    with open("user.txt", 'r') as user_file:
        user_data = user_file.read().split("\n")

    # Convert to a dictionary
    username_password = {}
    for user in user_data:
        username, password = user.split(';')
        username_password[username] = password

    logged_in = False
    while not logged_in:

        print("LOGIN")
        curr_user = "admin"
        curr_pass = "password"
        # curr_user = input("Username: ")
        # curr_pass = input("Password: ")
        if curr_user not in username_password.keys():
            print("User does not exist")
            continue
        elif username_password[curr_user] != curr_pass:
            print("Wrong password")
            continue
        else:
            print("Login Successful!")
            logged_in = True

    print(LINE)

    # 2. Set up tasklist template
    default_file = open("capstone_two/tasks.txt", "w+")
    first_chars = "1;Add functionality to task manager;admin;"
    second_chars = "2022-12-01;2022-11-22;No;"
    third_chars = "Add additional options and refactor the code." 
    default_file.writelines(first_chars+second_chars+third_chars+"\n")
    default_file.close()

    # 2. Call on current task list 
    task_list = open_tasklist()

    # 3. Present user with menu options
    while True:
        # Present the menu to the user; and 
        # Make sure that the user input is converted to lower case.
        print()
        menu = input('''Select one of the following options below:
    r - Registering a user
    a - Adding a task
    va - View all tasks
    vm - View my task
    gr - Generate reports
    ds - Display statistics
    e - Exit
    : ''').lower()
        print(LINE)

        if menu == 'r':
            print("")
            reg_user(username_password=username_password)   
            print(LINE)

        elif menu == 'a':
            print("")
            add_task()
            print(LINE)
        
        elif menu == 'va':
            print("")
            view_all(task_list=task_list)
            print(LINE)
                
        elif menu == 'vm':
            print('\33[1m'"\nPlease see your tasks below:\n"'\33[0m')
            view_mine(task_list=task_list, curr_user=curr_user)
            print(LINE)

        elif menu == 'gr':
            generate_reports()
            # Confirm that the task and user overview reports have been generated
            print("\nSuccess. Your task and user overiew reports have been generated!\n")
            print(LINE)
            
        elif menu == 'ds' and curr_user == 'admin': 
            print("")
            display_stats(curr_user=curr_user)
            print(LINE)

        elif menu == 'e':
            print('Thank you fou using the Task Manager. Goodbye!!!')
            exit()

        else:
            print("You have made a wrong choice, Please Try again")

if __name__ == "__main__":
    main()